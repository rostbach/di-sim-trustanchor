afeafadeöäpå

There we have to have directory SOURCES for source packages

A specification file wpa_supplicant.spec defines, how the 
source is to be built, where it is installed, what components
it needs to build and to run etc.

Specification, how to build is 
rpm build -ba rpm/wpa_supplicant.spec 

Name:       wpa_supplicant

Summary:    WPA/WPA2/IEEE 802.1X Supplicant
Version:    2.4
Release:    1
Group:      System Environment/Base
License:    GPLv2
URL:        http://w1.fi/wpa_supplicant/
Source0:    %{name}-%{version}.tar.gz
Source1:    build-config
Source2:    %{name}.conf
Source3:    %{name}.service
Source4:    %{name}.sysconfig
BuildRequires:  pkgconfig(libnl-3.0)
BuildRequires:  pkgconfig(dbus-1)
BuildRequires:  pkgconfig(openssl)
BuildRequires:  readline-devel
# Required for systemctl
Requires(post): systemd
Requires(preun): systemd
Requires(postun): systemd
# Required for rm
Requires(post): coreutils

%description
wpa_supplicant is a WPA Supplicant for Linux, BSD and Windows with support
for WPA and WPA2 (IEEE 802.11i / RSN). Supplicant is the IEEE 802.1X/WPA
component that is used in the client stations. It implements key negotiation
with a WPA Authenticator and it controls the roaming and IEEE 802.11
authentication/association of the wlan driver.

%prep
%setup -q -n %{name}-%{version}
/hostap

%build

[..]

muokataan wpa_supplicant.spe fileä

--turhaa--^^
.......
Yritetään rakentaa 2.5-1 versiota, ensin x86_64 alustalla
(miksi 2.5-1?) 
src/jolla:ssa on 2.4
error: Failed build dependencies:
        pkgconfig(libnl-3.0) is needed by wpa_supplicant-2.5-1.x86_64
        pkgconfig(dbus-1) is needed by wpa_supplicant-2.5-1.x86_64
        pkgconfig(openssl) is needed by wpa_supplicant-2.5-1.x86_64
        readline-devel is needed by wpa_supplicant-2.5-1.x86_64
%                                                                 
.......

Joten ainakin nämä libnl-3.0, dbus-1, openssl ja readline-devel tarvitaan.
i

erot alkuperäiseen build-config:iin
.......................





Login to Mer Virtual machine to cross compile

1. Start Mer Virtual Machine image inside Virtualbox program.

This opens an ssh server which by default listens on port 2222 on
localhost. One can use SSH keypair authentication to get there. 
(mersdk is an SSH private key of type PEM RSA)

ssh -l mersdk -p 2222 \
    -i ~/emu/sailfish/vmshare/ssh/private_keys/engine/mersdk 
     localhost

Last login: Sun Nov 15 09:50:47 2015 from 10.0.2.2
[mersdk@SailfishSDK ~]$  

# User's home directory from the host machine is connected to virtual machines
# folder /home/mer/share 

# This virtual machine's architecture is x86.
[mersdk@SailfishSDK ~]$ uname -rvm
3.6.11-10.1.17.jolla #1 SMP PREEMPT Sat Jun 20 01:53:22 UTC 2015 i686

# Move to sandboxed armv7hl architecture (armv7hl) for compiling
[mersdk@SailfishSDK ~]$ sb2 -t SailfishOS-armv7hl -R

# Now we are running (with virtual root-user) in armv7l architecture
[SB2 sdk-build SailfishOS-armv7hl] root@SailfishSDK ~ # uname -rvm
3.6.11-10.1.17.jolla #1 SMP PREEMPT Sat Jun 20 01:53:22 UTC 2015 armv7l



i.................COMPILE................
Q1: miten haettu source rpm:llä 

 zypper in openssl
 rpmbuild -ba rpm/wpa_supplicant.spec
# selvisi, mitkä kirjastot puuttuvat
 zypper in readline-devel libnl-3.0
 rpmbuild -ba rpm/wpa_supplicant.spec
# pkgconfig:ssa vielä mätää
   18  zypper in pkgconfig
# se olikin, mutta se ei löytänyt jotain.
zypper install libnl

   38  pkg-config  --exists openssl

# oikea olikin sourcet openssl:ään
   71  zypper in openssl-dev

 kirjasto kirjastn libnl-3

  100  cd hostap
# tänne purettu aiemmin wpa_supplicant srpm
  109  cp -a wpa_supplicant/ /home/mersdk/rpmbuild/SOURCES/

 cd ;  rpmbuild -ba rpm/wpa_supplicant.spec

 131  cd /home/mersdk/
  132  cd rpmbuild/SOURCES/
  133  ls
  134  rm -rf wpa_supplicant
  135  mv /home/mersdk/share/Downloads/wpa_supplicant-2.4.tar.gz .

 148  rpmbuild -ba rpm/wpa_supplicant.spec
  149  tar tf /home/mersdk/rpmbuild/SOURCES/wpa_supplicant-2.4.tar.gz
  150  cd /home/mersdk/rpmbuild/BUILD
  153  ln -s wpa_supplicant-master-d948daecc827a2b4aac707a685a5be7119e597a3/ wpa_supplicant-2.4


  154  cd -
  155  rpmbuild -ba rpm/wpa_supplicant.spec 
  # sääntö wpa_supplicantin käännökseen oikeaan paikkaan

  165  cp rpm/build-config /home/mersdk/rpmbuild/SOURCES/build-config
  166  rpmbuild -ba rpm/wpa_supplicant.spec
 
  170  zypper in pcsc-lite

  191  vim /home/mersdk/rpmbuild/SPECS/wpa_supplicant.spec

----
sb2 osuus

[SB2 sdk-build SailfishOS-armv7hl] root@SailfishSDK ~ # 


cd /home/mersdk/rpmbuild/SOURCES/pcsc-lite-1.8.13
./configure ; make ; make install

# This installed the pcsc-libraries into /usr/local/lib of virtual image.

wpa_supplicant was also compiled in similar way. The needed option were 
added to configuration file before compiling:

> CONFIG_EAP_SIM=y
> CONFIG_SIM_SIMULATOR=y
> CONFIG_USIM_SIMULATOR=y
> CONFIG_PCSC=y

Then the configure and make programs took care of the rest.
./configure ; make ; make install

When wpa-supplicant was compiled and linked, it was stripped from
debugging symbols to make its size to merely 15% of the original size.
<<<<<<<<<<<<<<<<< 
#ls -s wpa_supplicant-pscs
5788 wpa_supplicant-pcsc

# strip wpa_supplicant-pcsc
# ls -s wpa_supplicant-pscs
876 wpa_supplicant-pcsc
>>>>>>>>>>>>>>>>>>>>

Finally programs wpa_supplicant-pcsc and corresponding libpcsclite.so.1 library were copied to jolla phone, which was connected to the computer with an USB cable.

scp wpa_supplicant-pcsc nemo@jolla:
scp libpcsclite.so* nemo@jolla:/usr/local/lib


# kopioidaan trombonen kotihakemistoon käännetty (tai alkup?) wpa_supp and from there
  331  cp rpmbuild/RPMS/armv7hl/wpa_supplicant-2.4+git3-1.15.1.armv7hl.rpm /home/mersdk/share/

.................COMPILE.ENDS...............


===========================================
Running the new binary on real smartphone.

1. login to Jolla phone

% ssh jolla 
Last login: Sun Oct 11 17:44:37 2015 from 192.168.2.1
,---
| SailfishOS 1.1.9.28 (Eineheminlampi) (armv7hl)
'---
[nemo@Jolla ~]$ pwd
/home/nemo


# We now can use inside the real physical smartphone this newly compiled
# version which uses uses a configuration file instead of a SIM card.  To make
# sure, that it does not conflict with an existing wpa_supplicant on the phone,
# we first disable the system version and use manually our version. 

<<<<<
[nemo@Jolla ~]$ systemctl disable wpa_supplicant
>>>>>

Last thing to notice, is that because the /libpcsclite/ libraries are in non-standard
place (in /usr/local/lib), we must start wpa_supplicant with the correct
dynamic library path environment value otherwise an error occurs.

...............
## An example of running program gives out the version information without and with 
 
[nemo@Jolla ~]$ export WPASUPP=/home/nemo/wpa-pscs/wpa_supplicant-pcsc-stripped

[nemo@Jolla ~]$ ${WPASUPP} -v
./wpa_supplicant-pcsc-stripped: error while loading shared libraries: 
libpcsclite.so.1: cannot open shared object file: No such file or directory

[nemo@Jolla ~]$ LD_LIBRARY_PATH=/usr/local/lib ${WPASUPP} -v
v2.4 (malinen 2003-2015)
...............

